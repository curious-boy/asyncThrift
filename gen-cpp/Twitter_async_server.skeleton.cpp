// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "Twitter.h"
#include <protocol/TBinaryProtocol.h>
#include <async/TEvhttpServer.h>
#include <stdio.h>
#include <event.h>
#include <string>
#include <iostream>
#include <boost/bind.hpp>
#include <boost/function.hpp>
#include <transport/TSocket.h>
#include <transport/TTransportUtils.h>
#include <async/TAsyncProtocolProcessor.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace thrift::example;

#pragma comment(lib,"libthriftnb.lib")


class TwitterAsyncHandler : public TwitterCobSvIf {
 public:
  TwitterAsyncHandler() {
    //syncHandler_ = std::auto_ptr<TwitterHandler>(new TwitterHandler);
    // Your initialization goes here
  }
  //virtual ~TwitterAsyncHandler();

  void sendLongString(tcxx::function<void(twitterReturnStruct const& _return)> cob, const std::string& data) {
    twitterReturnStruct _return;
   // syncHandler_->sendLongString(_return, data);
	_return.strSend = "ltest";
	_return.strMethod = "sendLongString";
	_return.strGet = data;
    return cob(_return);
  }

  void sendString(tcxx::function<void(twitterReturnStruct const& _return)> cob, const std::string& data) {
    twitterReturnStruct _return;
   // syncHandler_->sendString(_return, data);
	_return.strSend = "test";
	_return.strMethod = "sendString";
	_return.strGet = data;
    return cob(_return);
  }

  void testBool(tcxx::function<void(bool const& _return)> cob, const std::string& data) {
    bool _return = false;
    //_return = syncHandler_->testBool(data);
	_return = true;
    return cob(_return);
  }

 protected:
  //std::auto_ptr<TwitterHandler> syncHandler_;
};

int main(int argc, char **argv) {
	WORD wVersionRequested;
	WSADATA wsaData;
	int err;
	wVersionRequested = MAKEWORD(2,1);
	err = WSAStartup(wVersionRequested,&wsaData);
	if (err != 0)
	{
		return -1;
	}

	shared_ptr<TAsyncProcessor> underlying_pro(new TwitterAsyncProcessor( shared_ptr<TwitterCobSvIf>(new TwitterAsyncHandler()) ) );
	shared_ptr<TAsyncBufferProcessor> processor( new TAsyncProtocolProcessor( underlying_pro, shared_ptr<TProtocolFactory>(new TBinaryProtocolFactory()) ) );

	TEvhttpServer server(processor, 9090);

	printf("server is listening...\n");
	server.serve();
	return 0;
}
