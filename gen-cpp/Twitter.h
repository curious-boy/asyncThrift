/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Twitter_H
#define Twitter_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include "asyncTest_types.h"

namespace thrift { namespace example {

class TwitterIf {
 public:
  virtual ~TwitterIf() {}
  virtual void sendLongString(twitterReturnStruct& _return, const std::string& data) = 0;
  virtual void sendString(twitterReturnStruct& _return, const std::string& data) = 0;
  virtual bool testBool(const std::string& data) = 0;
};

class TwitterIfFactory {
 public:
  typedef TwitterIf Handler;

  virtual ~TwitterIfFactory() {}

  virtual TwitterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TwitterIf* /* handler */) = 0;
};

class TwitterIfSingletonFactory : virtual public TwitterIfFactory {
 public:
  TwitterIfSingletonFactory(const boost::shared_ptr<TwitterIf>& iface) : iface_(iface) {}
  virtual ~TwitterIfSingletonFactory() {}

  virtual TwitterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TwitterIf* /* handler */) {}

 protected:
  boost::shared_ptr<TwitterIf> iface_;
};

class TwitterNull : virtual public TwitterIf {
 public:
  virtual ~TwitterNull() {}
  void sendLongString(twitterReturnStruct& /* _return */, const std::string& /* data */) {
    return;
  }
  void sendString(twitterReturnStruct& /* _return */, const std::string& /* data */) {
    return;
  }
  bool testBool(const std::string& /* data */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Twitter_sendLongString_args__isset {
  _Twitter_sendLongString_args__isset() : data(false) {}
  bool data :1;
} _Twitter_sendLongString_args__isset;

class Twitter_sendLongString_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Twitter_sendLongString_args(const Twitter_sendLongString_args&);
  Twitter_sendLongString_args& operator=(const Twitter_sendLongString_args&);
  Twitter_sendLongString_args() : data() {
  }

  virtual ~Twitter_sendLongString_args() throw();
  std::string data;

  _Twitter_sendLongString_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Twitter_sendLongString_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Twitter_sendLongString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Twitter_sendLongString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_sendLongString_args& obj);
};


class Twitter_sendLongString_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Twitter_sendLongString_pargs() throw();
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_sendLongString_pargs& obj);
};

typedef struct _Twitter_sendLongString_result__isset {
  _Twitter_sendLongString_result__isset() : success(false) {}
  bool success :1;
} _Twitter_sendLongString_result__isset;

class Twitter_sendLongString_result {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};

  Twitter_sendLongString_result(const Twitter_sendLongString_result&);
  Twitter_sendLongString_result& operator=(const Twitter_sendLongString_result&);
  Twitter_sendLongString_result() {
  }

  virtual ~Twitter_sendLongString_result() throw();
  twitterReturnStruct success;

  _Twitter_sendLongString_result__isset __isset;

  void __set_success(const twitterReturnStruct& val);

  bool operator == (const Twitter_sendLongString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Twitter_sendLongString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Twitter_sendLongString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_sendLongString_result& obj);
};

typedef struct _Twitter_sendLongString_presult__isset {
  _Twitter_sendLongString_presult__isset() : success(false) {}
  bool success :1;
} _Twitter_sendLongString_presult__isset;

class Twitter_sendLongString_presult {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};


  virtual ~Twitter_sendLongString_presult() throw();
  twitterReturnStruct* success;

  _Twitter_sendLongString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_sendLongString_presult& obj);
};

typedef struct _Twitter_sendString_args__isset {
  _Twitter_sendString_args__isset() : data(false) {}
  bool data :1;
} _Twitter_sendString_args__isset;

class Twitter_sendString_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Twitter_sendString_args(const Twitter_sendString_args&);
  Twitter_sendString_args& operator=(const Twitter_sendString_args&);
  Twitter_sendString_args() : data() {
  }

  virtual ~Twitter_sendString_args() throw();
  std::string data;

  _Twitter_sendString_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Twitter_sendString_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Twitter_sendString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Twitter_sendString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_sendString_args& obj);
};


class Twitter_sendString_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Twitter_sendString_pargs() throw();
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_sendString_pargs& obj);
};

typedef struct _Twitter_sendString_result__isset {
  _Twitter_sendString_result__isset() : success(false) {}
  bool success :1;
} _Twitter_sendString_result__isset;

class Twitter_sendString_result {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};

  Twitter_sendString_result(const Twitter_sendString_result&);
  Twitter_sendString_result& operator=(const Twitter_sendString_result&);
  Twitter_sendString_result() {
  }

  virtual ~Twitter_sendString_result() throw();
  twitterReturnStruct success;

  _Twitter_sendString_result__isset __isset;

  void __set_success(const twitterReturnStruct& val);

  bool operator == (const Twitter_sendString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Twitter_sendString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Twitter_sendString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_sendString_result& obj);
};

typedef struct _Twitter_sendString_presult__isset {
  _Twitter_sendString_presult__isset() : success(false) {}
  bool success :1;
} _Twitter_sendString_presult__isset;

class Twitter_sendString_presult {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};


  virtual ~Twitter_sendString_presult() throw();
  twitterReturnStruct* success;

  _Twitter_sendString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_sendString_presult& obj);
};

typedef struct _Twitter_testBool_args__isset {
  _Twitter_testBool_args__isset() : data(false) {}
  bool data :1;
} _Twitter_testBool_args__isset;

class Twitter_testBool_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Twitter_testBool_args(const Twitter_testBool_args&);
  Twitter_testBool_args& operator=(const Twitter_testBool_args&);
  Twitter_testBool_args() : data() {
  }

  virtual ~Twitter_testBool_args() throw();
  std::string data;

  _Twitter_testBool_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Twitter_testBool_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Twitter_testBool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Twitter_testBool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_testBool_args& obj);
};


class Twitter_testBool_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Twitter_testBool_pargs() throw();
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_testBool_pargs& obj);
};

typedef struct _Twitter_testBool_result__isset {
  _Twitter_testBool_result__isset() : success(false) {}
  bool success :1;
} _Twitter_testBool_result__isset;

class Twitter_testBool_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  Twitter_testBool_result(const Twitter_testBool_result&);
  Twitter_testBool_result& operator=(const Twitter_testBool_result&);
  Twitter_testBool_result() : success(0) {
  }

  virtual ~Twitter_testBool_result() throw();
  bool success;

  _Twitter_testBool_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Twitter_testBool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Twitter_testBool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Twitter_testBool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_testBool_result& obj);
};

typedef struct _Twitter_testBool_presult__isset {
  _Twitter_testBool_presult__isset() : success(false) {}
  bool success :1;
} _Twitter_testBool_presult__isset;

class Twitter_testBool_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~Twitter_testBool_presult() throw();
  bool* success;

  _Twitter_testBool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Twitter_testBool_presult& obj);
};

class TwitterClient : virtual public TwitterIf {
 public:
  TwitterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TwitterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendLongString(twitterReturnStruct& _return, const std::string& data);
  void send_sendLongString(const std::string& data);
  void recv_sendLongString(twitterReturnStruct& _return);
  void sendString(twitterReturnStruct& _return, const std::string& data);
  void send_sendString(const std::string& data);
  void recv_sendString(twitterReturnStruct& _return);
  bool testBool(const std::string& data);
  void send_testBool(const std::string& data);
  bool recv_testBool();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TwitterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TwitterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TwitterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendLongString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_testBool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TwitterProcessor(boost::shared_ptr<TwitterIf> iface) :
    iface_(iface) {
    processMap_["sendLongString"] = &TwitterProcessor::process_sendLongString;
    processMap_["sendString"] = &TwitterProcessor::process_sendString;
    processMap_["testBool"] = &TwitterProcessor::process_testBool;
  }

  virtual ~TwitterProcessor() {}
};

class TwitterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TwitterProcessorFactory(const ::boost::shared_ptr< TwitterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TwitterIfFactory > handlerFactory_;
};

class TwitterMultiface : virtual public TwitterIf {
 public:
  TwitterMultiface(std::vector<boost::shared_ptr<TwitterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TwitterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TwitterIf> > ifaces_;
  TwitterMultiface() {}
  void add(boost::shared_ptr<TwitterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sendLongString(twitterReturnStruct& _return, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendLongString(_return, data);
    }
    ifaces_[i]->sendLongString(_return, data);
    return;
  }

  void sendString(twitterReturnStruct& _return, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendString(_return, data);
    }
    ifaces_[i]->sendString(_return, data);
    return;
  }

  bool testBool(const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->testBool(data);
    }
    return ifaces_[i]->testBool(data);
  }

};

class TwitterCobClient;

class TwitterCobClIf {
 public:
  virtual ~TwitterCobClIf() {}
  virtual void sendLongString(tcxx::function<void(TwitterCobClient* client)> cob, const std::string& data) = 0;
  virtual void sendString(tcxx::function<void(TwitterCobClient* client)> cob, const std::string& data) = 0;
  virtual void testBool(tcxx::function<void(TwitterCobClient* client)> cob, const std::string& data) = 0;
};

class TwitterCobSvIf {
 public:
  virtual ~TwitterCobSvIf() {}
  virtual void sendLongString(tcxx::function<void(twitterReturnStruct const& _return)> cob, const std::string& data) = 0;
  virtual void sendString(tcxx::function<void(twitterReturnStruct const& _return)> cob, const std::string& data) = 0;
  virtual void testBool(tcxx::function<void(bool const& _return)> cob, const std::string& data) = 0;
};

class TwitterCobSvIfFactory {
 public:
  typedef TwitterCobSvIf Handler;

  virtual ~TwitterCobSvIfFactory() {}

  virtual TwitterCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TwitterCobSvIf* /* handler */) = 0;
};

class TwitterCobSvIfSingletonFactory : virtual public TwitterCobSvIfFactory {
 public:
  TwitterCobSvIfSingletonFactory(const boost::shared_ptr<TwitterCobSvIf>& iface) : iface_(iface) {}
  virtual ~TwitterCobSvIfSingletonFactory() {}

  virtual TwitterCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TwitterCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<TwitterCobSvIf> iface_;
};

class TwitterCobSvNull : virtual public TwitterCobSvIf {
 public:
  virtual ~TwitterCobSvNull() {}
  void sendLongString(tcxx::function<void(twitterReturnStruct const& _return)> cob, const std::string& /* data */) {
    twitterReturnStruct _return;
    return cob(_return);
  }
  void sendString(tcxx::function<void(twitterReturnStruct const& _return)> cob, const std::string& /* data */) {
    twitterReturnStruct _return;
    return cob(_return);
  }
  void testBool(tcxx::function<void(bool const& _return)> cob, const std::string& /* data */) {
    bool _return = false;
    return cob(_return);
  }
};

class TwitterCobClient : virtual public TwitterCobClIf {
 public:
  TwitterCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void sendLongString(tcxx::function<void(TwitterCobClient* client)> cob, const std::string& data);
  void send_sendLongString(const std::string& data);
  void recv_sendLongString(twitterReturnStruct& _return);
  void sendString(tcxx::function<void(TwitterCobClient* client)> cob, const std::string& data);
  void send_sendString(const std::string& data);
  void recv_sendString(twitterReturnStruct& _return);
  void testBool(tcxx::function<void(TwitterCobClient* client)> cob, const std::string& data);
  void send_testBool(const std::string& data);
  bool recv_testBool();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TwitterAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<TwitterCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (TwitterAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendLongString(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_sendLongString(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const twitterReturnStruct& _return);
  void throw_sendLongString(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_sendString(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_sendString(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const twitterReturnStruct& _return);
  void throw_sendString(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_testBool(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_testBool(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_testBool(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  TwitterAsyncProcessor(boost::shared_ptr<TwitterCobSvIf> iface) :
    iface_(iface) {
    processMap_["sendLongString"] = &TwitterAsyncProcessor::process_sendLongString;
    processMap_["sendString"] = &TwitterAsyncProcessor::process_sendString;
    processMap_["testBool"] = &TwitterAsyncProcessor::process_testBool;
  }

  virtual ~TwitterAsyncProcessor() {}
};

class TwitterAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  TwitterAsyncProcessorFactory(const ::boost::shared_ptr< TwitterCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TwitterCobSvIfFactory > handlerFactory_;
};

}} // namespace

#endif
