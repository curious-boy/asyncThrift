/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "asyncTest_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thrift { namespace example {


twitterReturnStruct::~twitterReturnStruct() throw() {
}


void twitterReturnStruct::__set_strMethod(const std::string& val) {
  this->strMethod = val;
}

void twitterReturnStruct::__set_strSend(const std::string& val) {
  this->strSend = val;
}

void twitterReturnStruct::__set_strGet(const std::string& val) {
  this->strGet = val;
}

const char* twitterReturnStruct::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t twitterReturnStruct::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t twitterReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strMethod);
          this->__isset.strMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strSend);
          this->__isset.strSend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strGet);
          this->__isset.strGet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t twitterReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("twitterReturnStruct");

  xfer += oprot->writeFieldBegin("strMethod", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->strMethod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strSend", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->strSend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strGet", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->strGet);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(twitterReturnStruct &a, twitterReturnStruct &b) {
  using ::std::swap;
  swap(a.strMethod, b.strMethod);
  swap(a.strSend, b.strSend);
  swap(a.strGet, b.strGet);
  swap(a.__isset, b.__isset);
}

twitterReturnStruct::twitterReturnStruct(const twitterReturnStruct& other0) {
  strMethod = other0.strMethod;
  strSend = other0.strSend;
  strGet = other0.strGet;
  __isset = other0.__isset;
}
twitterReturnStruct& twitterReturnStruct::operator=(const twitterReturnStruct& other1) {
  strMethod = other1.strMethod;
  strSend = other1.strSend;
  strGet = other1.strGet;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const twitterReturnStruct& obj) {
  using apache::thrift::to_string;
  out << "twitterReturnStruct(";
  out << "strMethod=" << to_string(obj.strMethod);
  out << ", " << "strSend=" << to_string(obj.strSend);
  out << ", " << "strGet=" << to_string(obj.strGet);
  out << ")";
  return out;
}

}} // namespace
